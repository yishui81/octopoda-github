
# Copyright (C) Jacky Wang


OC_USER=${OC_USER:-nobody}

if [ -z "$OC_GROUP" ]; then
    if [ $OC_USER = nobody ]; then
        if grep nobody /etc/group 2>&1 >/dev/null; then
            echo "checking for nobody group ... found"
            OC_GROUP=nobody
        else
            echo "checking for nobody group ... not found"

            if grep nogroup /etc/group 2>&1 >/dev/null; then
                echo "checking for nogroup group ... found"
                OC_GROUP=nogroup
            else
                echo "checking for nogroup group ... not found"
                OC_GROUP=nobody
            fi
        fi
    else
        OC_GROUP=$OC_USER
    fi
fi


oc_feature="poll()"
oc_feature_name=
oc_feature_run=no
oc_feature_incs="#include <poll.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="int  n; struct pollfd  pl;
                  pl.fd = 0;
                  pl.events = 0;
                  pl.revents = 0;
                  n = poll(&pl, 1, 0);
                  if (n == -1) return 1"
. auto/feature

if [ $oc_found = no ]; then
    EVENT_POLL=NONE
fi


oc_feature="/dev/poll"
oc_feature_name="OC_HAVE_DEVPOLL"
oc_feature_run=no
oc_feature_incs="#include <sys/devpoll.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="int  n, dp; struct dvpoll  dvp;
                  dp = 0;
                  dvp.dp_fds = NULL;
                  dvp.dp_nfds = 0;
                  dvp.dp_timeout = 0;
                  n = ioctl(dp, DP_POLL, &dvp);
                  if (n == -1) return 1"
. auto/feature

if [ $oc_found = yes ]; then
    CORE_SRCS="$CORE_SRCS $DEVPOLL_SRCS"
    EVENT_MODULES="$EVENT_MODULES $DEVPOLL_MODULE"
    EVENT_FOUND=YES
fi


if test -z "$OC_KQUEUE_CHECKED"; then
    oc_feature="kqueue"
    oc_feature_name="OC_HAVE_KQUEUE"
    oc_feature_run=no
    oc_feature_incs="#include <sys/event.h>"
    oc_feature_path=
    oc_feature_libs=
    oc_feature_test="int kq; kq = kqueue()"
    . auto/feature

    if [ $oc_found = yes ]; then

        have=OC_HAVE_CLEAR_EVENT . auto/have
        EVENT_MODULES="$EVENT_MODULES $KQUEUE_MODULE"
        CORE_SRCS="$CORE_SRCS $KQUEUE_SRCS"
        EVENT_FOUND=YES

        oc_feature="kqueue's NOTE_LOWAT"
        oc_feature_name="OC_HAVE_LOWAT_EVENT"
        oc_feature_run=no
        oc_feature_incs="#include <sys/event.h>"
        oc_feature_path=
        oc_feature_libs=
        oc_feature_test="struct kevent  kev;
                          kev.fflags = NOTE_LOWAT;"
        . auto/feature


        oc_feature="kqueue's EVFILT_TIMER"
        oc_feature_name="OC_HAVE_TIMER_EVENT"
        oc_feature_run=yes
        oc_feature_incs="#include <sys/event.h>
                          #include <sys/time.h>"
        oc_feature_path=
        oc_feature_libs=
        oc_feature_test="int      kq;
                  struct kevent    kev;
                  struct timespec  ts;

                  if ((kq = kqueue()) == -1) return 1;

                  kev.ident = 0;
                  kev.filter = EVFILT_TIMER;
                  kev.flags = EV_ADD|EV_ENABLE;
                  kev.fflags = 0;
                  kev.data = 1000;
                  kev.udata = 0;

                  ts.tv_sec = 0;
                  ts.tv_nsec = 0;

                  if (kevent(kq, &kev, 1, &kev, 1, &ts) == -1) return 1;

                  if (kev.flags & EV_ERROR) return 1;"

        . auto/feature
    fi
fi


if [ "$OC_SYSTEM" = "NetBSD" ]; then

    # NetBSD 2.0 incompatibly defines kevent.udata as "intptr_t"

    cat << END >> $OC_AUTO_CONFIG_H

#define OC_KQUEUE_UDATA_T

END

else
    cat << END >> $OC_AUTO_CONFIG_H

#define OC_KQUEUE_UDATA_T  (void *)

END

fi


oc_feature="crypt()"
oc_feature_name=
oc_feature_run=no
oc_feature_incs=
oc_feature_path=
oc_feature_libs=
oc_feature_test="crypt(\"test\", \"salt\");"
. auto/feature


if [ $oc_found = no ]; then

    oc_feature="crypt() in libcrypt"
    oc_feature_name=
    oc_feature_run=no
    oc_feature_incs=
    oc_feature_path=
    oc_feature_libs=-lcrypt
    . auto/feature

    if [ $oc_found = yes ]; then
        CRYPT_LIB="-lcrypt"
    fi
fi


oc_feature="F_READAHEAD"
oc_feature_name="OC_HAVE_F_READAHEAD"
oc_feature_run=no
oc_feature_incs="#include <fcntl.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="fcntl(0, F_READAHEAD, 1);"
. auto/feature


oc_feature="posix_fadvise()"
oc_feature_name="OC_HAVE_POSIX_FADVISE"
oc_feature_run=no
oc_feature_incs="#include <fcntl.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="posix_fadvise(0, 0, 0, POSIX_FADV_SEQUENTIAL);"
. auto/feature


oc_feature="O_DIRECT"
oc_feature_name="OC_HAVE_O_DIRECT"
oc_feature_run=no
oc_feature_incs="#include <fcntl.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="fcntl(0, F_SETFL, O_DIRECT);"
. auto/feature


if [ $oc_found = yes -a "$OC_SYSTEM" = "Linux" ]; then
    have=OC_HAVE_ALIGNED_DIRECTIO . auto/have
fi

oc_feature="F_NOCACHE"
oc_feature_name="OC_HAVE_F_NOCACHE"
oc_feature_run=no
oc_feature_incs="#include <fcntl.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="fcntl(0, F_NOCACHE, 1);"
. auto/feature


oc_feature="directio()"
oc_feature_name="OC_HAVE_DIRECTIO"
oc_feature_run=no
oc_feature_incs="#include <sys/types.h>
                  #include <sys/fcntl.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="directio(0, DIRECTIO_ON);"
. auto/feature


oc_feature="statfs()"
oc_feature_name="OC_HAVE_STATFS"
oc_feature_run=no
oc_feature_incs="$OC_INCLUDE_SYS_PARAM_H
                  $OC_INCLUDE_SYS_MOUNT_H
                  $OC_INCLUDE_SYS_VFS_H"
oc_feature_path=
oc_feature_libs=
oc_feature_test="struct statfs  fs;
                  statfs(\".\", &fs);"
. auto/feature


oc_feature="statvfs()"
oc_feature_name="OC_HAVE_STATVFS"
oc_feature_run=no
oc_feature_incs="#include <sys/types.h>
                  #include <sys/statvfs.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="struct statvfs  fs;
                  statvfs(\".\", &fs);"
. auto/feature


oc_feature="dlopen()"
oc_feature_name=
oc_feature_run=no
oc_feature_incs="#include <dlfcn.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="dlopen(NULL, 0)"
. auto/feature


if [ $oc_found != yes ]; then

    oc_feature="dlopen() in libdl"
    oc_feature_libs="-ldl"
    . auto/feature

    if [ $oc_found = yes ]; then
        OC_LIBDL="-ldl"
    fi
fi


oc_feature="sched_yield()"
oc_feature_name="OC_HAVE_SCHED_YIELD"
oc_feature_run=no
oc_feature_incs="#include <sched.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="sched_yield()"
. auto/feature


if [ $oc_found != yes ]; then

    oc_feature="sched_yield() in librt"
    oc_feature_libs="-lrt"
    . auto/feature

    if [ $oc_found = yes ]; then
        CORE_LIBS="$CORE_LIBS -lrt"
    fi
fi


oc_feature="SO_SETFIB"
oc_feature_name="OC_HAVE_SETFIB"
oc_feature_run=no
oc_feature_incs="#include <sys/socket.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="setsockopt(0, SOL_SOCKET, SO_SETFIB, NULL, 4)"
. auto/feature


oc_feature="SO_ACCEPTFILTER"
oc_feature_name="OC_HAVE_DEFERRED_ACCEPT"
oc_feature_run=no
oc_feature_incs="#include <sys/socket.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="setsockopt(0, SOL_SOCKET, SO_ACCEPTFILTER, NULL, 0)"
. auto/feature


oc_feature="TCP_DEFER_ACCEPT"
oc_feature_name="OC_HAVE_DEFERRED_ACCEPT"
oc_feature_run=no
oc_feature_incs="#include <sys/socket.h>
                  #include <netinet/in.h>
                  #include <netinet/tcp.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="setsockopt(0, IPPROTO_TCP, TCP_DEFER_ACCEPT, NULL, 0)"
. auto/feature


oc_feature="TCP_KEEPIDLE, TCP_KEEPINTVL, TCP_KEEPCNT"
oc_feature_name="OC_HAVE_KEEPALIVE_TUNABLE"
oc_feature_run=no
oc_feature_incs="#include <sys/socket.h>
                  #include <netinet/in.h>
                  #include <netinet/tcp.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="setsockopt(0, IPPROTO_TCP, TCP_KEEPIDLE, NULL, 0);
                  setsockopt(0, IPPROTO_TCP, TCP_KEEPINTVL, NULL, 0);
                  setsockopt(0, IPPROTO_TCP, TCP_KEEPCNT, NULL, 0)"
. auto/feature


oc_feature="TCP_INFO"
oc_feature_name="OC_HAVE_TCP_INFO"
oc_feature_run=no
oc_feature_incs="#include <sys/socket.h>
                  #include <netinet/in.h>
                  #include <netinet/tcp.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="socklen_t optlen = sizeof(struct tcp_info);
                  struct tcp_info ti;
                  ti.tcpi_rtt = 0;
                  ti.tcpi_rttvar = 0;
                  ti.tcpi_snd_cwnd = 0;
                  ti.tcpi_rcv_space = 0;
                  getsockopt(0, IPPROTO_TCP, TCP_INFO, &ti, &optlen)"
. auto/feature


oc_feature="accept4()"
oc_feature_name="OC_HAVE_ACCEPT4"
oc_feature_run=no
oc_feature_incs="#include <sys/socket.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="accept4(0, NULL, NULL, SOCK_NONBLOCK)"
. auto/feature

if [ $OC_FILE_AIO = YES ]; then

    oc_feature="kqueue AIO support"
    oc_feature_name="OC_HAVE_FILE_AIO"
    oc_feature_run=no
    oc_feature_incs="#include <aio.h>"
    oc_feature_path=
    oc_feature_libs=
    oc_feature_test="int  n; struct aiocb  iocb;
                      iocb.aio_sigevent.sigev_notify = SIGEV_KEVENT;
                      n = aio_read(&iocb)"
    . auto/feature

    if [ $oc_found = yes ]; then
        CORE_SRCS="$CORE_SRCS $FILE_AIO_SRCS"

    elif [ $oc_found = no ]; then

        oc_feature="Linux AIO support"
        oc_feature_name="OC_HAVE_FILE_AIO"
        oc_feature_run=no
        oc_feature_incs="#include <linux/aio_abi.h>
                          #include <sys/syscall.h>"
        oc_feature_path=
        oc_feature_libs=
        oc_feature_test="int  n = SYS_eventfd;
                          struct iocb  iocb;
                          iocb.aio_lio_opcode = IOCB_CMD_PREAD;
                          iocb.aio_flags = IOCB_FLAG_RESFD;
                          iocb.aio_resfd = -1;"
        . auto/feature

        if [ $oc_found = yes ]; then
            have=OC_HAVE_EVENTFD . auto/have
            CORE_SRCS="$CORE_SRCS $LINUX_AIO_SRCS"

        else
            cat << END

$0: no supported file AIO was found
Currently file AIO is supported on FreeBSD 4.3+ and Linux 2.6.22+ only

END
           exit 1
        fi
    fi
fi


have=OC_HAVE_UNIX_DOMAIN . auto/have

oc_feature_libs=


# C types

oc_type="int"; . auto/types/sizeof

oc_type="long"; . auto/types/sizeof

oc_type="long long"; . auto/types/sizeof

oc_type="void *"; . auto/types/sizeof; oc_ptr_size=$oc_size
oc_param=OC_PTR_SIZE; oc_value=$oc_size; . auto/types/value


# POSIX types

case "$OC_AUTO_CONFIG_H" in
    /*)
        OC_INCLUDE_AUTO_CONFIG_H="#include \"$OC_AUTO_CONFIG_H\""
    ;;
    *)
        OC_INCLUDE_AUTO_CONFIG_H="#include \"../$OC_AUTO_CONFIG_H\""
    ;;
esac

oc_type="uint64_t"; oc_types="u_int64_t"; . auto/types/typedef

oc_type="sig_atomic_t"; oc_types="int"; . auto/types/typedef
. auto/types/sizeof
oc_param=OC_SIG_ATOMIC_T_SIZE; oc_value=$oc_size; . auto/types/value

oc_type="socklen_t"; oc_types="int"; . auto/types/typedef

oc_type="in_addr_t"; oc_types="uint32_t"; . auto/types/typedef

oc_type="in_port_t"; oc_types="u_short"; . auto/types/typedef

oc_type="rlim_t"; oc_types="int"; . auto/types/typedef

. auto/types/uintptr_t

. auto/endianness

oc_type="size_t"; . auto/types/sizeof
oc_param=OC_MAX_SIZE_T_VALUE; oc_value=$oc_max_value; . auto/types/value
oc_param=OC_SIZE_T_LEN; oc_value=$oc_max_len; . auto/types/value

oc_type="off_t"; . auto/types/sizeof
oc_param=OC_MAX_OFF_T_VALUE; oc_value=$oc_max_value; . auto/types/value
oc_param=OC_OFF_T_LEN; oc_value=$oc_max_len; . auto/types/value

oc_type="time_t"; . auto/types/sizeof
oc_param=OC_TIME_T_SIZE; oc_value=$oc_size; . auto/types/value
oc_param=OC_TIME_T_LEN; oc_value=$oc_max_len; . auto/types/value


# syscalls, libc calls and some features


if [ $OC_IPV6 = YES ]; then
    oc_feature="AF_INET6"
    oc_feature_name="OC_HAVE_INET6"
    oc_feature_run=no
    oc_feature_incs="#include <sys/socket.h>
                      #include <netinet/in.h>
                      #include <arpa/inet.h>"
    oc_feature_path=
    oc_feature_libs=
    oc_feature_test="struct sockaddr_in6  sin6;
                      sin6.sin6_family = AF_INET6;"
    . auto/feature
fi


oc_feature="setproctitle()"
oc_feature_name="OC_HAVE_SETPROCTITLE"
oc_feature_run=no
oc_feature_incs="#include <stdlib.h>"
oc_feature_path=
oc_feature_libs=$OC_SETPROCTITLE_LIB
oc_feature_test="setproctitle(\"test\");"
. auto/feature


oc_feature="pread()"
oc_feature_name="OC_HAVE_PREAD"
oc_feature_run=no
oc_feature_incs=
oc_feature_path=
oc_feature_libs=
oc_feature_test="char buf[1]; ssize_t n; n = pread(0, buf, 1, 0);
                  if (n == -1) return 1"
. auto/feature


oc_feature="pwrite()"
oc_feature_name="OC_HAVE_PWRITE"
oc_feature_run=no
oc_feature_incs=
oc_feature_path=
oc_feature_libs=
oc_feature_test="char buf[1]; ssize_t n; n = pwrite(1, buf, 1, 0);
                  if (n == -1) return 1"
. auto/feature


oc_feature="sys_nerr"
oc_feature_name="OC_SYS_NERR"
oc_feature_run=value
oc_feature_incs='#include <errno.h>
                  #include <stdio.h>'
oc_feature_path=
oc_feature_libs=
oc_feature_test='printf("%d", sys_nerr);'
. auto/feature


if [ $oc_found = no ]; then

    # Cygiwn defines _sys_nerr
    oc_feature="_sys_nerr"
    oc_feature_name="OC_SYS_NERR"
    oc_feature_run=value
    oc_feature_incs='#include <errno.h>
                      #include <stdio.h>'
    oc_feature_path=
    oc_feature_libs=
    oc_feature_test='printf("%d", _sys_nerr);'
    . auto/feature
fi


if [ $oc_found = no ]; then

    # Solaris has no sys_nerr
    oc_feature='maximum errno'
    oc_feature_name=OC_SYS_NERR
    oc_feature_run=value
    oc_feature_incs='#include <errno.h>
                      #include <string.h>
                      #include <stdio.h>'
    oc_feature_path=
    oc_feature_libs=
    oc_feature_test='int  n;
                      char *p;
                      for (n = 1; n < 1000; n++) {
                          errno = 0;
                          p = strerror(n);
                          if (errno == EINVAL
                              || p == NULL
                              || strncmp(p, "Unknown error", 13) == 0)
                          {
                              break;
                          }
                      }
                      printf("%d", n);'
    . auto/feature
fi


oc_feature="localtime_r()"
oc_feature_name="OC_HAVE_LOCALTIME_R"
oc_feature_run=no
oc_feature_incs="#include <time.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="struct tm t; time_t c=0; localtime_r(&c, &t)"
. auto/feature


oc_feature="posix_memalign()"
oc_feature_name="OC_HAVE_POSIX_MEMALIGN"
oc_feature_run=no
oc_feature_incs="#include <stdlib.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="void *p; int n; n = posix_memalign(&p, 4096, 4096);
                  if (n != 0) return 1"
. auto/feature


oc_feature="memalign()"
oc_feature_name="OC_HAVE_MEMALIGN"
oc_feature_run=no
oc_feature_incs="#include <stdlib.h>
                  #include <malloc.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="void *p; p = memalign(4096, 4096);
                  if (p == NULL) return 1"
. auto/feature


oc_feature="mmap(MAP_ANON|MAP_SHARED)"
oc_feature_name="OC_HAVE_MAP_ANON"
oc_feature_run=yes
oc_feature_incs="#include <sys/mman.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="void *p;
                  p = mmap(NULL, 4096, PROT_READ|PROT_WRITE,
                           MAP_ANON|MAP_SHARED, -1, 0);
                  if (p == MAP_FAILED) return 1;"
. auto/feature


oc_feature='mmap("/dev/zero", MAP_SHARED)'
oc_feature_name="OC_HAVE_MAP_DEVZERO"
oc_feature_run=yes
oc_feature_incs="#include <sys/mman.h>
                  #include <sys/stat.h>
                  #include <fcntl.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test='void *p; int  fd;
                  fd = open("/dev/zero", O_RDWR);
                  p = mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);
                  if (p == MAP_FAILED) return 1;'
. auto/feature


oc_feature="System V shared memory"
oc_feature_name="OC_HAVE_SYSVSHM"
oc_feature_run=yes
oc_feature_incs="#include <sys/ipc.h>
                  #include <sys/shm.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="int  id;
                  id = shmget(IPC_PRIVATE, 4096, (SHM_R|SHM_W|IPC_CREAT));
                  if (id == -1) return 1;
                  shmctl(id, IPC_RMID, NULL);"
. auto/feature


oc_feature="POSIX semaphores"
oc_feature_name="OC_HAVE_POSIX_SEM"
oc_feature_run=yes
oc_feature_incs="#include <semaphore.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="sem_t  sem;
                  if (sem_init(&sem, 1, 0) == -1) return 1;
                  sem_destroy(&sem);"
. auto/feature


if [ $oc_found = no ]; then

    # Linux has POSIX semaphores in libpthread
    oc_feature="POSIX semaphores in libpthread"
    oc_feature_libs=-lpthread
    . auto/feature

    if [ $oc_found = yes ]; then
        CORE_LIBS="$CORE_LIBS -lpthread"
    fi
fi


if [ $oc_found = no ]; then

    # Solaris has POSIX semaphores in librt
    oc_feature="POSIX semaphores in librt"
    oc_feature_libs=-lrt
    . auto/feature

    if [ $oc_found = yes ]; then
        CORE_LIBS="$CORE_LIBS -lrt"
    fi
fi


oc_feature="struct msghdr.msg_control"
oc_feature_name="OC_HAVE_MSGHDR_MSG_CONTROL"
oc_feature_run=no
oc_feature_incs="#include <sys/socket.h>
                  #include <stdio.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="struct msghdr  msg;
                  printf(\"%d\", (int) sizeof(msg.msg_control))"
. auto/feature


oc_feature="ioctl(FIONBIO)"
oc_feature_name="OC_HAVE_FIONBIO"
oc_feature_run=no
oc_feature_incs="#include <sys/ioctl.h>
                  #include <stdio.h>
                  $OC_INCLUDE_SYS_FILIO_H"
oc_feature_path=
oc_feature_libs=
oc_feature_test="int i = FIONBIO; printf(\"%d\", i)"
. auto/feature


oc_feature="struct tm.tm_gmtoff"
oc_feature_name="OC_HAVE_GMTOFF"
oc_feature_run=no
oc_feature_incs="#include <time.h>
                  #include <stdio.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="struct tm  tm; tm.tm_gmtoff = 0;
                  printf(\"%d\", (int) tm.tm_gmtoff)"
. auto/feature


oc_feature="struct dirent.d_namlen"
oc_feature_name="OC_HAVE_D_NAMLEN"
oc_feature_run=no
oc_feature_incs="#include <dirent.h>
                  #include <stdio.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="struct dirent  dir; dir.d_namlen = 0;
                  printf(\"%d\", (int) dir.d_namlen)"
. auto/feature


oc_feature="struct dirent.d_type"
oc_feature_name="OC_HAVE_D_TYPE"
oc_feature_run=no
oc_feature_incs="#include <dirent.h>
                  #include <stdio.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="struct dirent  dir; dir.d_type = DT_REG;
                  printf(\"%d\", (int) dir.d_type)"
. auto/feature


oc_feature="sysconf(_SC_NPROCESSORS_ONLN)"
oc_feature_name="OC_HAVE_SC_NPROCESSORS_ONLN"
oc_feature_run=no
oc_feature_incs=
oc_feature_path=
oc_feature_libs=
oc_feature_test="sysconf(_SC_NPROCESSORS_ONLN)"
. auto/feature


oc_feature="openat(), fstatat()"
oc_feature_name="OC_HAVE_OPENAT"
oc_feature_run=no
oc_feature_incs="#include <sys/types.h>
                  #include <sys/stat.h>
                  #include <fcntl.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test="struct stat sb;
                  openat(AT_FDCWD, \".\", O_RDONLY|O_NOFOLLOW);
                  fstatat(AT_FDCWD, \".\", &sb, AT_SYMLINK_NOFOLLOW);"
. auto/feature


oc_feature="getaddrinfo()"
oc_feature_name="OC_HAVE_GETADDRINFO"
oc_feature_run=no
oc_feature_incs="#include <sys/types.h>
                  #include <sys/socket.h>
                  #include <netdb.h>"
oc_feature_path=
oc_feature_libs=
oc_feature_test='struct addrinfo *res;
                  if (getaddrinfo("localhost", NULL, NULL, &res) != 0) return 1;
                  freeaddrinfo(res)'
. auto/feature


oc_feature="floorf()"
oc_feature_name=
oc_feature_run=no
oc_feature_incs="#include <math.h>"
oc_feature_path=
oc_feature_libs=-lm
oc_feature_test='double a = 1.890;
                  if(floorf(a) == 1.0000)return 1'
. auto/feature

CORE_LIBS="$CORE_LIBS -lm -laio -lrt"


